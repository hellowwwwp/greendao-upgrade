package com.example.dbupgrade.processor

import com.google.auto.service.AutoService
import com.squareup.javapoet.*
import javax.annotation.processing.*
import javax.lang.model.SourceVersion
import javax.lang.model.element.Modifier
import javax.lang.model.element.TypeElement
import javax.lang.model.util.Elements
import javax.lang.model.util.Types
import javax.tools.Diagnostic

@Suppress("unused")
@AutoService(Processor::class)
class GreenDaoCollectorProcessor : AbstractProcessor() {

    companion object {
        const val ANNOTATION_ENTITY = "org.greenrobot.greendao.annotation.Entity"
        const val DAO_PACKAGE = "daoPackage"
        const val CLASS_NAME = "GreenDaoCollector"
        const val METHOD_NAME = "getAllDaoClasses"
    }

    private lateinit var filer: Filer
    private lateinit var messager: Messager
    private lateinit var elementUtils: Elements
    private lateinit var typeUtils: Types

    private var daoPackage: String = ""

    override fun init(processingEnv: ProcessingEnvironment) {
        super.init(processingEnv)
        filer = processingEnv.filer
        messager = processingEnv.messager
        elementUtils = processingEnv.elementUtils
        typeUtils = processingEnv.typeUtils
        //解析参数
        daoPackage = processingEnv.options[DAO_PACKAGE] ?: ""
        messager.printMessage(Diagnostic.Kind.NOTE, "daoPackage: $daoPackage")
        if (daoPackage.isEmpty()) {
            messager.printMessage(Diagnostic.Kind.ERROR, "daoPackage is null")
            throw IllegalArgumentException("daoPackage is null")
        }
    }

    override fun getSupportedSourceVersion(): SourceVersion {
        return SourceVersion.latestSupported()
    }

    override fun getSupportedAnnotationTypes(): Set<String> {
        return setOf(ANNOTATION_ENTITY)
    }

    override fun getSupportedOptions(): Set<String> {
        return setOf(DAO_PACKAGE)
    }

    override fun process(annotations: MutableSet<out TypeElement>, roundEnv: RoundEnvironment): Boolean {
        val elements = roundEnv.getElementsAnnotatedWith(elementUtils.getTypeElement(ANNOTATION_ENTITY))
        if (elements.isNullOrEmpty()) {
            //process 方法会调用 3 次, 只有第1次有效, 第2, 3次调用的话生成 .java 文件会发生异常
            return false
        }
        messager.printMessage(Diagnostic.Kind.NOTE, "==========GreenDaoCollectorProcessor start===========")
        messager.printMessage(Diagnostic.Kind.NOTE, "daoPackage: $daoPackage")

        val daoClasses = mutableSetOf<String>()
        elements.mapTo(daoClasses) {
            "$daoPackage.${it.simpleName}Dao"
        }

        val returnType = ParameterizedTypeName.get(
            ClassName.get("java.util", "HashSet"),
            ParameterizedTypeName.get(
                ClassName.get("java.lang", "Class"),
                WildcardTypeName.subtypeOf(
                    ParameterizedTypeName.get(
                        ClassName.get("org.greenrobot.greendao", "AbstractDao"),
                        ClassName.get("", "?"),
                        ClassName.get("", "?")
                    )
                )
            )
        )

        val methodSpec = MethodSpec.methodBuilder(METHOD_NAME)
            .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
            .returns(returnType)
            .apply {
                val codeBlock = CodeBlock.builder().apply {
                    add("HashSet<Class<? extends AbstractDao<?, ?>>> daoClasses = new HashSet<>();\n")
                    for (daoClass in daoClasses) {
                        messager.printMessage(Diagnostic.Kind.NOTE, "daoClass: $daoClass")
                        add("daoClasses.add($daoClass.class);\n")
                    }
                    add("return daoClasses;")
                }.build()
                addCode(codeBlock)
            }.build()

        val classSpec = TypeSpec.classBuilder(CLASS_NAME)
            .addJavadoc("THIS CODE IS GENERATED BY GreenDaoCollectorProcessor, DO NOT EDIT.")
            .addModifiers(Modifier.PUBLIC)
            .addMethod(methodSpec)
            .build()

        JavaFile.builder(daoPackage, classSpec)
            .build()
            .writeTo(filer)
        messager.printMessage(Diagnostic.Kind.NOTE, "==========GreenDaoCollectorProcessor end===========")
        return true
    }

}